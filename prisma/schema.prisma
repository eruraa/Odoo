// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?  @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  points         Int      @default(0)
  accounts       Account[]
  sessions       Session[]
  clothes        ClothesItem[]
  swaps          Swap[]
  acceptedSwaps  Swap[]   @relation("AcceptedBy")
  cart           Cart?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ClothesItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  category    String
  size        String?
  condition   String
  brand       String?
  color       String?
  imageUrl    String?
  price       Float?
  isAvailable Boolean  @default(true)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  swaps       Swap[]
  requestedSwaps Swap[] @relation("RequestedItem")
  cartItems   CartItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Swap {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  status        SwapStatus @default(PENDING)
  offeredItemId String
  offeredItem   ClothesItem @relation(fields: [offeredItemId], references: [id], onDelete: Cascade)
  requestedItemId String?
  requestedItem   ClothesItem? @relation("RequestedItem", fields: [requestedItemId], references: [id], onDelete: SetNull)
  offeredBy     String
  offeredByUser User     @relation(fields: [offeredBy], references: [id], onDelete: Cascade)
  acceptedBy    String?
  acceptedByUser User?   @relation("AcceptedBy", fields: [acceptedBy], references: [id], onDelete: SetNull)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId       String
  cart         Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  clothesItemId String
  clothesItem  ClothesItem @relation(fields: [clothesItemId], references: [id], onDelete: Cascade)
  quantity     Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([cartId, clothesItemId])
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}